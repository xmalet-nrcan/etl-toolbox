name: ci-test-build-release
permissions:
  contents: write
on:
  push:
    tags:
      - 'v*.*.*'
    paths-ignore:
      - 'pyproject.toml' # Ignore les modifications de ce fichier pour √©viter les boucles
  pull_request:
    tags:
      - 'v*.*.*'
    paths-ignore:
        - 'pyproject.toml' # Ignore les modifications de ce fichier pour √©viter les boucles
jobs:

  test:
    if:  "!contains(github.event.head_commit.message, 'chore: bump version')"

    name: Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install Poetry
        run: pipx install poetry

      - name: Setup Poetry cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}

      - name: Install Dependencies
        run: poetry install

      - name: Run Tests
        run: poetry run pytest -v --cov --cov-branch --cov-report=xml tests/

      # Copy and paste the codecov/test-results-action here
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}


  build:
    name: Build Package
    needs: [ test ]
    runs-on: ubuntu-latest
    if: success() && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main
          token: ${{ secrets.GH_PAT || secrets.GITHUB_TOKEN }}

      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install Poetry
        run: pipx install poetry

      - name: Extract tag version
        id: tag_version
        if: startsWith(github.ref, 'refs/tags/v')
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Update version in pyproject.toml
        if: startsWith(github.ref, 'refs/tags/v')
        run: poetry version ${{ steps.tag_version.outputs.version }}

      - name: Commit version bump
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add pyproject.toml
          git commit -m "chore: bump version to ${{ steps.tag_version.outputs.version }}" || echo "No changes to commit"
          git push origin main

      - name: Build Package
        run: poetry build

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 7

  release:
    name: Create GitHub Release
    needs: [ build ]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
      id-token: write
    steps:
      - uses: actions/checkout@v4

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: "Release ${{ github.ref_name }}"
          tag_name: ${{ github.ref_name }}
          body: |
            üöÄ **Release ${{ github.ref_name }}**
            
            Cette release a √©t√© g√©n√©r√©e automatiquement par le workflow CI.
          files: dist/*
          generate_release_notes: true
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publier sur PyPI
        uses: pypa/gh-action-pypi-publish@v1.13.0
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}
          packages_dir: dist/
